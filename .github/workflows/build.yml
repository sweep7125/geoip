name: Build geoip.dat
on:
  workflow_dispatch:
  schedule:
    - cron: "30 0 */3 * *"
  push:
    branches:
      - main
    paths-ignore:
      - ".gitignore"
      - "LICENSE*"
      - "*.md"
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Checkout Loyalsoldier/geoip
        uses: actions/checkout@v4
        with:
          repository: Loyalsoldier/geoip
          path: geoip
          fetch-depth: 1

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./geoip/go.mod
          cache-dependency-path: ./geoip/go.sum

      - name: Set variables
        run: |
          echo "TAG_NAME=geoip-release" >> $GITHUB_ENV
          echo "RELEASE_NAME=Geoip Release" >> $GITHUB_ENV
        shell: bash

      - name: Build GeoIP files
        run: |
          go build -C geoip ./
          ./geoip/geoip convert -c ./config.json

      - name: Generate sha256 checksum for dat files
        run: |
          cd ./output || exit 1
          for name in $(ls *.dat); do
            sha256sum ${name} > ./${name}.sha256sum
          done

      - name: Git push assets to "release" branch
        run: |
          cd output || exit 1
          git init
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -b release
          git add -A
          git commit -m "${{ env.RELEASE_NAME }}"
          git remote add geoip "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f -u geoip release

      - name: Create or update release and upload top-level assets
        run: |
          if ! gh release view "${{ env.TAG_NAME }}" > /dev/null 2>&1; then
            gh release create "${{ env.TAG_NAME }}" -t "${{ env.RELEASE_NAME }}" -n "Release generated automatically" --target release --draft=false
          fi
          gh release upload "${{ env.TAG_NAME }}" $(find ./output -maxdepth 1 -type f) --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

